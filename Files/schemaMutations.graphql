input CreateOrderRequestInput {
  orderLines: [OrderLineInput!]!
  customerEmail: String
  firstName: String
  lastName: String
}

input OrderLineInput {
  productId: Int!
  quantity: Int!
}

type CreateOrderResponse {
  orderId: Int!
  customerId: Int!
  orderDate: DateTime!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

type Mutation {
  createCategory(categoryName: String!): CreateCategoryResponse!
  createProduct(
    productName: String!
    productCode: String!
    description: String!
    price: Decimal!
    stock: Int!
    categoriesId: [Int!]!
  ): CreateProductResponse!
  createOrder(orderRequest: CreateOrderRequestInput!): CreateOrderResponse!
}

input CategoryTypeFilterInput {
  and: [CategoryTypeFilterInput!]
  or: [CategoryTypeFilterInput!]
  categoryId: IntOperationFilterInput
  categoryName: StringOperationFilterInput
}

input CategoryTypeSortInput {
  categoryId: SortEnumType
  categoryName: SortEnumType
}

input CustomerTypeFilterInput {
  and: [CustomerTypeFilterInput!]
  or: [CustomerTypeFilterInput!]
  customerId: IntOperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  email: StringOperationFilterInput
}

input CustomerTypeSortInput {
  customerId: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  email: SortEnumType
}

input OrderTypeFilterInput {
  and: [OrderTypeFilterInput!]
  or: [OrderTypeFilterInput!]
  orderId: IntOperationFilterInput
  orderDate: DateTimeOperationFilterInput
  customerId: IntOperationFilterInput
}

input OrderTypeSortInput {
  orderId: SortEnumType
  orderDate: SortEnumType
  customerId: SortEnumType
}

"""
A connection to a list of items.
"""
type ProductsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [ProductType!]
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type ProductType {
  categories: [CategoryType!]!
  orders: [OrderTypeQuantity!]!
  productId: Int!
  productName: String!
  productCode: String!
  description: String!
  price: Decimal!
  stock: Int!
}

"""
An edge in a connection.
"""
type ProductsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProductType!
}

type OrderType {
  customer: CustomerType!
  orderId: Int!
  orderDate: DateTime!
  customerId: Int!
}

type CustomerType {
  orders: [OrderType]!
  customerId: Int!
  firstName: String!
  lastName: String
  email: String!
}

type CategoryType {
  products: [ProductType!]!
  categoryId: Int!
  categoryName: String!
}

type OrderTypeQuantity {
  customer: CustomerType!
  quantity: Int
  orderId: Int!
  orderDate: DateTime!
  customerId: Int!
}

type CreateCategoryResponse {
  categoryId: Int!
  categoryName: String!
}

type CreateProductResponse {
  productId: Int!
  productName: String!
  productCode: String!
  description: String!
  price: Decimal!
  stock: Int!
}

"""
The built-in `Decimal` scalar type.
"""
scalar Decimal
